'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3074
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="email_metrics")>  _
Partial Public Class projXDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertprojX_desc(instance As projX_desc)
    End Sub
  Partial Private Sub UpdateprojX_desc(instance As projX_desc)
    End Sub
  Partial Private Sub DeleteprojX_desc(instance As projX_desc)
    End Sub
  Partial Private Sub Insertprojx_actions_desc(instance As projx_actions_desc)
    End Sub
  Partial Private Sub Updateprojx_actions_desc(instance As projx_actions_desc)
    End Sub
  Partial Private Sub Deleteprojx_actions_desc(instance As projx_actions_desc)
    End Sub
  Partial Private Sub Insertprojx_action(instance As projx_action)
    End Sub
  Partial Private Sub Updateprojx_action(instance As projx_action)
    End Sub
  Partial Private Sub Deleteprojx_action(instance As projx_action)
    End Sub
  Partial Private Sub InsertprojX(instance As projX)
    End Sub
  Partial Private Sub UpdateprojX(instance As projX)
    End Sub
  Partial Private Sub DeleteprojX(instance As projX)
    End Sub
  Partial Private Sub Insertprojx_status_desc(instance As projx_status_desc)
    End Sub
  Partial Private Sub Updateprojx_status_desc(instance As projx_status_desc)
    End Sub
  Partial Private Sub Deleteprojx_status_desc(instance As projx_status_desc)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("email_metricsConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property projX_descs() As System.Data.Linq.Table(Of projX_desc)
		Get
			Return Me.GetTable(Of projX_desc)
		End Get
	End Property
	
	Public ReadOnly Property projx_actions_descs() As System.Data.Linq.Table(Of projx_actions_desc)
		Get
			Return Me.GetTable(Of projx_actions_desc)
		End Get
	End Property
	
	Public ReadOnly Property projx_actions() As System.Data.Linq.Table(Of projx_action)
		Get
			Return Me.GetTable(Of projx_action)
		End Get
	End Property
	
	Public ReadOnly Property projXes() As System.Data.Linq.Table(Of projX)
		Get
			Return Me.GetTable(Of projX)
		End Get
	End Property
	
	Public ReadOnly Property projx_status_descs() As System.Data.Linq.Table(Of projx_status_desc)
		Get
			Return Me.GetTable(Of projx_status_desc)
		End Get
	End Property
End Class

<Table(Name:="dbo.projX_desc")>  _
Partial Public Class projX_desc
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _projid As Long
	
	Private _descid As Long
	
	Private _projX As EntityRef(Of projX)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnprojidChanging(value As Long)
    End Sub
    Partial Private Sub OnprojidChanged()
    End Sub
    Partial Private Sub OndescidChanging(value As Long)
    End Sub
    Partial Private Sub OndescidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._projX = CType(Nothing, EntityRef(Of projX))
		OnCreated
	End Sub
	
	<Column(Storage:="_projid", DbType:="BigInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property projid() As Long
		Get
			Return Me._projid
		End Get
		Set
			If ((Me._projid = value)  _
						= false) Then
				If Me._projX.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnprojidChanging(value)
				Me.SendPropertyChanging
				Me._projid = value
				Me.SendPropertyChanged("projid")
				Me.OnprojidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_descid", DbType:="BigInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property descid() As Long
		Get
			Return Me._descid
		End Get
		Set
			If ((Me._descid = value)  _
						= false) Then
				Me.OndescidChanging(value)
				Me.SendPropertyChanging
				Me._descid = value
				Me.SendPropertyChanged("descid")
				Me.OndescidChanged
			End If
		End Set
	End Property
	
	<Association(Name:="projX_projX_desc", Storage:="_projX", ThisKey:="projid", OtherKey:="projid", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property projX() As projX
		Get
			Return Me._projX.Entity
		End Get
		Set
			Dim previousValue As projX = Me._projX.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._projX.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._projX.Entity = Nothing
					previousValue.projX_descs.Remove(Me)
				End If
				Me._projX.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.projX_descs.Add(Me)
					Me._projid = value.projid
				Else
					Me._projid = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("projX")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.projx_actions_desc")>  _
Partial Public Class projx_actions_desc
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _actionid As Long
	
	Private _actionname As String
	
	Private _projx_actions As EntitySet(Of projx_action)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnactionidChanging(value As Long)
    End Sub
    Partial Private Sub OnactionidChanged()
    End Sub
    Partial Private Sub OnactionnameChanging(value As String)
    End Sub
    Partial Private Sub OnactionnameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._projx_actions = New EntitySet(Of projx_action)(AddressOf Me.attach_projx_actions, AddressOf Me.detach_projx_actions)
		OnCreated
	End Sub
	
	<Column(Storage:="_actionid", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property actionid() As Long
		Get
			Return Me._actionid
		End Get
		Set
			If ((Me._actionid = value)  _
						= false) Then
				Me.OnactionidChanging(value)
				Me.SendPropertyChanging
				Me._actionid = value
				Me.SendPropertyChanged("actionid")
				Me.OnactionidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_actionname", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property actionname() As String
		Get
			Return Me._actionname
		End Get
		Set
			If (String.Equals(Me._actionname, value) = false) Then
				Me.OnactionnameChanging(value)
				Me.SendPropertyChanging
				Me._actionname = value
				Me.SendPropertyChanged("actionname")
				Me.OnactionnameChanged
			End If
		End Set
	End Property
	
	<Association(Name:="projx_actions_desc_projx_action", Storage:="_projx_actions", ThisKey:="actionid", OtherKey:="actionid")>  _
	Public Property projx_actions() As EntitySet(Of projx_action)
		Get
			Return Me._projx_actions
		End Get
		Set
			Me._projx_actions.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_projx_actions(ByVal entity As projx_action)
		Me.SendPropertyChanging
		entity.projx_actions_desc = Me
	End Sub
	
	Private Sub detach_projx_actions(ByVal entity As projx_action)
		Me.SendPropertyChanging
		entity.projx_actions_desc = Nothing
	End Sub
End Class

<Table(Name:="dbo.projx_actions")>  _
Partial Public Class projx_action
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _projid As Long
	
	Private _actionid As Long
	
	Private _timestamp As Date
	
	Private _proactid As Long
	
	Private _projx_actions_desc As EntityRef(Of projx_actions_desc)
	
	Private _projX As EntityRef(Of projX)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnprojidChanging(value As Long)
    End Sub
    Partial Private Sub OnprojidChanged()
    End Sub
    Partial Private Sub OnactionidChanging(value As Long)
    End Sub
    Partial Private Sub OnactionidChanged()
    End Sub
    Partial Private Sub OntimestampChanging(value As Date)
    End Sub
    Partial Private Sub OntimestampChanged()
    End Sub
    Partial Private Sub OnproactidChanging(value As Long)
    End Sub
    Partial Private Sub OnproactidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._projx_actions_desc = CType(Nothing, EntityRef(Of projx_actions_desc))
		Me._projX = CType(Nothing, EntityRef(Of projX))
		OnCreated
	End Sub
	
	<Column(Storage:="_projid", DbType:="BigInt NOT NULL")>  _
	Public Property projid() As Long
		Get
			Return Me._projid
		End Get
		Set
			If ((Me._projid = value)  _
						= false) Then
				If Me._projX.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnprojidChanging(value)
				Me.SendPropertyChanging
				Me._projid = value
				Me.SendPropertyChanged("projid")
				Me.OnprojidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_actionid", DbType:="BigInt NOT NULL")>  _
	Public Property actionid() As Long
		Get
			Return Me._actionid
		End Get
		Set
			If ((Me._actionid = value)  _
						= false) Then
				If Me._projx_actions_desc.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnactionidChanging(value)
				Me.SendPropertyChanging
				Me._actionid = value
				Me.SendPropertyChanged("actionid")
				Me.OnactionidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_timestamp", DbType:="DateTime NOT NULL")>  _
	Public Property timestamp() As Date
		Get
			Return Me._timestamp
		End Get
		Set
			If ((Me._timestamp = value)  _
						= false) Then
				Me.OntimestampChanging(value)
				Me.SendPropertyChanging
				Me._timestamp = value
				Me.SendPropertyChanged("timestamp")
				Me.OntimestampChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_proactid", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property proactid() As Long
		Get
			Return Me._proactid
		End Get
		Set
			If ((Me._proactid = value)  _
						= false) Then
				Me.OnproactidChanging(value)
				Me.SendPropertyChanging
				Me._proactid = value
				Me.SendPropertyChanged("proactid")
				Me.OnproactidChanged
			End If
		End Set
	End Property
	
	<Association(Name:="projx_actions_desc_projx_action", Storage:="_projx_actions_desc", ThisKey:="actionid", OtherKey:="actionid", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property projx_actions_desc() As projx_actions_desc
		Get
			Return Me._projx_actions_desc.Entity
		End Get
		Set
			Dim previousValue As projx_actions_desc = Me._projx_actions_desc.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._projx_actions_desc.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._projx_actions_desc.Entity = Nothing
					previousValue.projx_actions.Remove(Me)
				End If
				Me._projx_actions_desc.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.projx_actions.Add(Me)
					Me._actionid = value.actionid
				Else
					Me._actionid = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("projx_actions_desc")
			End If
		End Set
	End Property
	
	<Association(Name:="projX_projx_action", Storage:="_projX", ThisKey:="projid", OtherKey:="projid", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property projX() As projX
		Get
			Return Me._projX.Entity
		End Get
		Set
			Dim previousValue As projX = Me._projX.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._projX.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._projX.Entity = Nothing
					previousValue.projx_actions.Remove(Me)
				End If
				Me._projX.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.projx_actions.Add(Me)
					Me._projid = value.projid
				Else
					Me._projid = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("projX")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.projX")>  _
Partial Public Class projX
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _projid As Long
	
	Private _projname As String
	
	Private _projdir As String
	
	Private _projtypeid As System.Nullable(Of Integer)
	
	Private _projReleaseDate As System.Nullable(Of Date)
	
	Private _projStartDate As System.Nullable(Of Date)
	
	Private _cid_email As System.Nullable(Of Integer)
	
	Private _jobidQB As String
	
	Private _projmisc As String
	
	Private _listoptions As String
	
	Private _projstatusid As System.Nullable(Of Long)
	
	Private _projX_descs As EntitySet(Of projX_desc)
	
	Private _projx_actions As EntitySet(Of projx_action)
	
	Private _projx_status_desc As EntityRef(Of projx_status_desc)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnprojidChanging(value As Long)
    End Sub
    Partial Private Sub OnprojidChanged()
    End Sub
    Partial Private Sub OnprojnameChanging(value As String)
    End Sub
    Partial Private Sub OnprojnameChanged()
    End Sub
    Partial Private Sub OnprojdirChanging(value As String)
    End Sub
    Partial Private Sub OnprojdirChanged()
    End Sub
    Partial Private Sub OnprojtypeidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnprojtypeidChanged()
    End Sub
    Partial Private Sub OnprojReleaseDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnprojReleaseDateChanged()
    End Sub
    Partial Private Sub OnprojStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnprojStartDateChanged()
    End Sub
    Partial Private Sub Oncid_emailChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Oncid_emailChanged()
    End Sub
    Partial Private Sub OnjobidQBChanging(value As String)
    End Sub
    Partial Private Sub OnjobidQBChanged()
    End Sub
    Partial Private Sub OnprojmiscChanging(value As String)
    End Sub
    Partial Private Sub OnprojmiscChanged()
    End Sub
    Partial Private Sub OnlistoptionsChanging(value As String)
    End Sub
    Partial Private Sub OnlistoptionsChanged()
    End Sub
    Partial Private Sub OnprojstatusidChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnprojstatusidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._projX_descs = New EntitySet(Of projX_desc)(AddressOf Me.attach_projX_descs, AddressOf Me.detach_projX_descs)
		Me._projx_actions = New EntitySet(Of projx_action)(AddressOf Me.attach_projx_actions, AddressOf Me.detach_projx_actions)
		Me._projx_status_desc = CType(Nothing, EntityRef(Of projx_status_desc))
		OnCreated
	End Sub
	
	<Column(Storage:="_projid", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property projid() As Long
		Get
			Return Me._projid
		End Get
		Set
			If ((Me._projid = value)  _
						= false) Then
				Me.OnprojidChanging(value)
				Me.SendPropertyChanging
				Me._projid = value
				Me.SendPropertyChanged("projid")
				Me.OnprojidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_projname", DbType:="VarChar(250)")>  _
	Public Property projname() As String
		Get
			Return Me._projname
		End Get
		Set
			If (String.Equals(Me._projname, value) = false) Then
				Me.OnprojnameChanging(value)
				Me.SendPropertyChanging
				Me._projname = value
				Me.SendPropertyChanged("projname")
				Me.OnprojnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_projdir", DbType:="VarChar(250)")>  _
	Public Property projdir() As String
		Get
			Return Me._projdir
		End Get
		Set
			If (String.Equals(Me._projdir, value) = false) Then
				Me.OnprojdirChanging(value)
				Me.SendPropertyChanging
				Me._projdir = value
				Me.SendPropertyChanged("projdir")
				Me.OnprojdirChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_projtypeid", DbType:="Int")>  _
	Public Property projtypeid() As System.Nullable(Of Integer)
		Get
			Return Me._projtypeid
		End Get
		Set
			If (Me._projtypeid.Equals(value) = false) Then
				Me.OnprojtypeidChanging(value)
				Me.SendPropertyChanging
				Me._projtypeid = value
				Me.SendPropertyChanged("projtypeid")
				Me.OnprojtypeidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_projReleaseDate", DbType:="Date")>  _
	Public Property projReleaseDate() As System.Nullable(Of Date)
		Get
			Return Me._projReleaseDate
		End Get
		Set
			If (Me._projReleaseDate.Equals(value) = false) Then
				Me.OnprojReleaseDateChanging(value)
				Me.SendPropertyChanging
				Me._projReleaseDate = value
				Me.SendPropertyChanged("projReleaseDate")
				Me.OnprojReleaseDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_projStartDate", DbType:="Date")>  _
	Public Property projStartDate() As System.Nullable(Of Date)
		Get
			Return Me._projStartDate
		End Get
		Set
			If (Me._projStartDate.Equals(value) = false) Then
				Me.OnprojStartDateChanging(value)
				Me.SendPropertyChanging
				Me._projStartDate = value
				Me.SendPropertyChanged("projStartDate")
				Me.OnprojStartDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_cid_email", DbType:="Int")>  _
	Public Property cid_email() As System.Nullable(Of Integer)
		Get
			Return Me._cid_email
		End Get
		Set
			If (Me._cid_email.Equals(value) = false) Then
				Me.Oncid_emailChanging(value)
				Me.SendPropertyChanging
				Me._cid_email = value
				Me.SendPropertyChanged("cid_email")
				Me.Oncid_emailChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_jobidQB", DbType:="VarChar(50)")>  _
	Public Property jobidQB() As String
		Get
			Return Me._jobidQB
		End Get
		Set
			If (String.Equals(Me._jobidQB, value) = false) Then
				Me.OnjobidQBChanging(value)
				Me.SendPropertyChanging
				Me._jobidQB = value
				Me.SendPropertyChanged("jobidQB")
				Me.OnjobidQBChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_projmisc", DbType:="VarChar(250)")>  _
	Public Property projmisc() As String
		Get
			Return Me._projmisc
		End Get
		Set
			If (String.Equals(Me._projmisc, value) = false) Then
				Me.OnprojmiscChanging(value)
				Me.SendPropertyChanging
				Me._projmisc = value
				Me.SendPropertyChanged("projmisc")
				Me.OnprojmiscChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_listoptions", DbType:="VarChar(250)")>  _
	Public Property listoptions() As String
		Get
			Return Me._listoptions
		End Get
		Set
			If (String.Equals(Me._listoptions, value) = false) Then
				Me.OnlistoptionsChanging(value)
				Me.SendPropertyChanging
				Me._listoptions = value
				Me.SendPropertyChanged("listoptions")
				Me.OnlistoptionsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_projstatusid", DbType:="BigInt")>  _
	Public Property projstatusid() As System.Nullable(Of Long)
		Get
			Return Me._projstatusid
		End Get
		Set
			If (Me._projstatusid.Equals(value) = false) Then
				If Me._projx_status_desc.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnprojstatusidChanging(value)
				Me.SendPropertyChanging
				Me._projstatusid = value
				Me.SendPropertyChanged("projstatusid")
				Me.OnprojstatusidChanged
			End If
		End Set
	End Property
	
	<Association(Name:="projX_projX_desc", Storage:="_projX_descs", ThisKey:="projid", OtherKey:="projid")>  _
	Public Property projX_descs() As EntitySet(Of projX_desc)
		Get
			Return Me._projX_descs
		End Get
		Set
			Me._projX_descs.Assign(value)
		End Set
	End Property
	
	<Association(Name:="projX_projx_action", Storage:="_projx_actions", ThisKey:="projid", OtherKey:="projid")>  _
	Public Property projx_actions() As EntitySet(Of projx_action)
		Get
			Return Me._projx_actions
		End Get
		Set
			Me._projx_actions.Assign(value)
		End Set
	End Property
	
	<Association(Name:="projx_status_desc_projX", Storage:="_projx_status_desc", ThisKey:="projstatusid", OtherKey:="projstatusid", IsForeignKey:=true)>  _
	Public Property projx_status_desc() As projx_status_desc
		Get
			Return Me._projx_status_desc.Entity
		End Get
		Set
			Dim previousValue As projx_status_desc = Me._projx_status_desc.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._projx_status_desc.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._projx_status_desc.Entity = Nothing
					previousValue.projXes.Remove(Me)
				End If
				Me._projx_status_desc.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.projXes.Add(Me)
					Me._projstatusid = value.projstatusid
				Else
					Me._projstatusid = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("projx_status_desc")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_projX_descs(ByVal entity As projX_desc)
		Me.SendPropertyChanging
		entity.projX = Me
	End Sub
	
	Private Sub detach_projX_descs(ByVal entity As projX_desc)
		Me.SendPropertyChanging
		entity.projX = Nothing
	End Sub
	
	Private Sub attach_projx_actions(ByVal entity As projx_action)
		Me.SendPropertyChanging
		entity.projX = Me
	End Sub
	
	Private Sub detach_projx_actions(ByVal entity As projx_action)
		Me.SendPropertyChanging
		entity.projX = Nothing
	End Sub
End Class

<Table(Name:="dbo.projx_status_desc")>  _
Partial Public Class projx_status_desc
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _projstatusid As Long
	
	Private _projstatusdesc As String
	
	Private _projXes As EntitySet(Of projX)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnprojstatusidChanging(value As Long)
    End Sub
    Partial Private Sub OnprojstatusidChanged()
    End Sub
    Partial Private Sub OnprojstatusdescChanging(value As String)
    End Sub
    Partial Private Sub OnprojstatusdescChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._projXes = New EntitySet(Of projX)(AddressOf Me.attach_projXes, AddressOf Me.detach_projXes)
		OnCreated
	End Sub
	
	<Column(Storage:="_projstatusid", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property projstatusid() As Long
		Get
			Return Me._projstatusid
		End Get
		Set
			If ((Me._projstatusid = value)  _
						= false) Then
				Me.OnprojstatusidChanging(value)
				Me.SendPropertyChanging
				Me._projstatusid = value
				Me.SendPropertyChanged("projstatusid")
				Me.OnprojstatusidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_projstatusdesc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property projstatusdesc() As String
		Get
			Return Me._projstatusdesc
		End Get
		Set
			If (String.Equals(Me._projstatusdesc, value) = false) Then
				Me.OnprojstatusdescChanging(value)
				Me.SendPropertyChanging
				Me._projstatusdesc = value
				Me.SendPropertyChanged("projstatusdesc")
				Me.OnprojstatusdescChanged
			End If
		End Set
	End Property
	
	<Association(Name:="projx_status_desc_projX", Storage:="_projXes", ThisKey:="projstatusid", OtherKey:="projstatusid")>  _
	Public Property projXes() As EntitySet(Of projX)
		Get
			Return Me._projXes
		End Get
		Set
			Me._projXes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_projXes(ByVal entity As projX)
		Me.SendPropertyChanging
		entity.projx_status_desc = Me
	End Sub
	
	Private Sub detach_projXes(ByVal entity As projX)
		Me.SendPropertyChanging
		entity.projx_status_desc = Nothing
	End Sub
End Class
