'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="email_metrics")>  _
Partial Public Class mailingtypesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertmailingtype_desc_mailing(instance As mailingtype_desc_mailing)
    End Sub
  Partial Private Sub Updatemailingtype_desc_mailing(instance As mailingtype_desc_mailing)
    End Sub
  Partial Private Sub Deletemailingtype_desc_mailing(instance As mailingtype_desc_mailing)
    End Sub
  Partial Private Sub Insertmailingtype_parse(instance As mailingtype_parse)
    End Sub
  Partial Private Sub Updatemailingtype_parse(instance As mailingtype_parse)
    End Sub
  Partial Private Sub Deletemailingtype_parse(instance As mailingtype_parse)
    End Sub
  Partial Private Sub Insertmailingtype_desc_type(instance As mailingtype_desc_type)
    End Sub
  Partial Private Sub Updatemailingtype_desc_type(instance As mailingtype_desc_type)
    End Sub
  Partial Private Sub Deletemailingtype_desc_type(instance As mailingtype_desc_type)
    End Sub
  Partial Private Sub Insertmailingtype_group_gran(instance As mailingtype_group_gran)
    End Sub
  Partial Private Sub Updatemailingtype_group_gran(instance As mailingtype_group_gran)
    End Sub
  Partial Private Sub Deletemailingtype_group_gran(instance As mailingtype_group_gran)
    End Sub
  Partial Private Sub Insertmailingtype_group_type(instance As mailingtype_group_type)
    End Sub
  Partial Private Sub Updatemailingtype_group_type(instance As mailingtype_group_type)
    End Sub
  Partial Private Sub Deletemailingtype_group_type(instance As mailingtype_group_type)
    End Sub
  Partial Private Sub Insertmailingtype_override(instance As mailingtype_override)
    End Sub
  Partial Private Sub Updatemailingtype_override(instance As mailingtype_override)
    End Sub
  Partial Private Sub Deletemailingtype_override(instance As mailingtype_override)
    End Sub
  Partial Private Sub Insertclient(instance As client)
    End Sub
  Partial Private Sub Updateclient(instance As client)
    End Sub
  Partial Private Sub Deleteclient(instance As client)
    End Sub
  Partial Private Sub Insertmailingtype_gran(instance As mailingtype_gran)
    End Sub
  Partial Private Sub Updatemailingtype_gran(instance As mailingtype_gran)
    End Sub
  Partial Private Sub Deletemailingtype_gran(instance As mailingtype_gran)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("email_metricsConnectionString3").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property mailingtype_desc_mailings() As System.Data.Linq.Table(Of mailingtype_desc_mailing)
		Get
			Return Me.GetTable(Of mailingtype_desc_mailing)
		End Get
	End Property
	
	Public ReadOnly Property mailingtype_parses() As System.Data.Linq.Table(Of mailingtype_parse)
		Get
			Return Me.GetTable(Of mailingtype_parse)
		End Get
	End Property
	
	Public ReadOnly Property mailingtype_desc_types() As System.Data.Linq.Table(Of mailingtype_desc_type)
		Get
			Return Me.GetTable(Of mailingtype_desc_type)
		End Get
	End Property
	
	Public ReadOnly Property mailingtype_group_grans() As System.Data.Linq.Table(Of mailingtype_group_gran)
		Get
			Return Me.GetTable(Of mailingtype_group_gran)
		End Get
	End Property
	
	Public ReadOnly Property mailingtype_group_types() As System.Data.Linq.Table(Of mailingtype_group_type)
		Get
			Return Me.GetTable(Of mailingtype_group_type)
		End Get
	End Property
	
	Public ReadOnly Property mailingtype_overrides() As System.Data.Linq.Table(Of mailingtype_override)
		Get
			Return Me.GetTable(Of mailingtype_override)
		End Get
	End Property
	
	Public ReadOnly Property clients() As System.Data.Linq.Table(Of client)
		Get
			Return Me.GetTable(Of client)
		End Get
	End Property
	
	Public ReadOnly Property clients_abbrs() As System.Data.Linq.Table(Of clients_abbr)
		Get
			Return Me.GetTable(Of clients_abbr)
		End Get
	End Property
	
	Public ReadOnly Property mailingtype_grans() As System.Data.Linq.Table(Of mailingtype_gran)
		Get
			Return Me.GetTable(Of mailingtype_gran)
		End Get
	End Property
End Class

<Table(Name:="dbo.mailingtype_desc_mailing")>  _
Partial Public Class mailingtype_desc_mailing
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _mailing_id As Long
	
	Private _descid As Integer
	
	Private _mailingtype_desc_type As EntityRef(Of mailingtype_desc_type)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onmailing_idChanging(value As Long)
    End Sub
    Partial Private Sub Onmailing_idChanged()
    End Sub
    Partial Private Sub OndescidChanging(value As Integer)
    End Sub
    Partial Private Sub OndescidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mailingtype_desc_type = CType(Nothing, EntityRef(Of mailingtype_desc_type))
		OnCreated
	End Sub
	
	<Column(Storage:="_mailing_id", DbType:="BigInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property mailing_id() As Long
		Get
			Return Me._mailing_id
		End Get
		Set
			If ((Me._mailing_id = value)  _
						= false) Then
				Me.Onmailing_idChanging(value)
				Me.SendPropertyChanging
				Me._mailing_id = value
				Me.SendPropertyChanged("mailing_id")
				Me.Onmailing_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_descid", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property descid() As Integer
		Get
			Return Me._descid
		End Get
		Set
			If ((Me._descid = value)  _
						= false) Then
				If Me._mailingtype_desc_type.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OndescidChanging(value)
				Me.SendPropertyChanging
				Me._descid = value
				Me.SendPropertyChanged("descid")
				Me.OndescidChanged
			End If
		End Set
	End Property
	
	<Association(Name:="mailingtype_desc_type_mailingtype_desc_mailing", Storage:="_mailingtype_desc_type", ThisKey:="descid", OtherKey:="descid", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property mailingtype_desc_type() As mailingtype_desc_type
		Get
			Return Me._mailingtype_desc_type.Entity
		End Get
		Set
			Dim previousValue As mailingtype_desc_type = Me._mailingtype_desc_type.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._mailingtype_desc_type.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._mailingtype_desc_type.Entity = Nothing
					previousValue.mailingtype_desc_mailings.Remove(Me)
				End If
				Me._mailingtype_desc_type.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.mailingtype_desc_mailings.Add(Me)
					Me._descid = value.descid
				Else
					Me._descid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("mailingtype_desc_type")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.mailingtype_parse")>  _
Partial Public Class mailingtype_parse
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _parseid As Integer
	
	Private _granid As System.Nullable(Of Integer)
	
	Private _precedence As Integer
	
	Private _parsename As String
	
	Private _mailingtype_gran As EntityRef(Of mailingtype_gran)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnparseidChanging(value As Integer)
    End Sub
    Partial Private Sub OnparseidChanged()
    End Sub
    Partial Private Sub OngranidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OngranidChanged()
    End Sub
    Partial Private Sub OnprecedenceChanging(value As Integer)
    End Sub
    Partial Private Sub OnprecedenceChanged()
    End Sub
    Partial Private Sub OnparsenameChanging(value As String)
    End Sub
    Partial Private Sub OnparsenameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mailingtype_gran = CType(Nothing, EntityRef(Of mailingtype_gran))
		OnCreated
	End Sub
	
	<Column(Storage:="_parseid", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property parseid() As Integer
		Get
			Return Me._parseid
		End Get
		Set
			If ((Me._parseid = value)  _
						= false) Then
				Me.OnparseidChanging(value)
				Me.SendPropertyChanging
				Me._parseid = value
				Me.SendPropertyChanged("parseid")
				Me.OnparseidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_granid", DbType:="Int")>  _
	Public Property granid() As System.Nullable(Of Integer)
		Get
			Return Me._granid
		End Get
		Set
			If (Me._granid.Equals(value) = false) Then
				If Me._mailingtype_gran.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OngranidChanging(value)
				Me.SendPropertyChanging
				Me._granid = value
				Me.SendPropertyChanged("granid")
				Me.OngranidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_precedence", DbType:="Int NOT NULL")>  _
	Public Property precedence() As Integer
		Get
			Return Me._precedence
		End Get
		Set
			If ((Me._precedence = value)  _
						= false) Then
				Me.OnprecedenceChanging(value)
				Me.SendPropertyChanging
				Me._precedence = value
				Me.SendPropertyChanged("precedence")
				Me.OnprecedenceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_parsename", DbType:="VarChar(60)")>  _
	Public Property parsename() As String
		Get
			Return Me._parsename
		End Get
		Set
			If (String.Equals(Me._parsename, value) = false) Then
				Me.OnparsenameChanging(value)
				Me.SendPropertyChanging
				Me._parsename = value
				Me.SendPropertyChanged("parsename")
				Me.OnparsenameChanged
			End If
		End Set
	End Property
	
	<Association(Name:="mailingtype_gran1_mailingtype_parse", Storage:="_mailingtype_gran", ThisKey:="granid", OtherKey:="granid", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property mailingtype_gran() As mailingtype_gran
		Get
			Return Me._mailingtype_gran.Entity
		End Get
		Set
			Dim previousValue As mailingtype_gran = Me._mailingtype_gran.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._mailingtype_gran.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._mailingtype_gran.Entity = Nothing
					previousValue.mailingtype_parses.Remove(Me)
				End If
				Me._mailingtype_gran.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.mailingtype_parses.Add(Me)
					Me._granid = value.granid
				Else
					Me._granid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("mailingtype_gran")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.mailingtype_desc_types")>  _
Partial Public Class mailingtype_desc_type
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _descid As Integer
	
	Private _desc As String
	
	Private _mailingtype_desc_mailings As EntitySet(Of mailingtype_desc_mailing)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OndescidChanging(value As Integer)
    End Sub
    Partial Private Sub OndescidChanged()
    End Sub
    Partial Private Sub OndescChanging(value As String)
    End Sub
    Partial Private Sub OndescChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mailingtype_desc_mailings = New EntitySet(Of mailingtype_desc_mailing)(AddressOf Me.attach_mailingtype_desc_mailings, AddressOf Me.detach_mailingtype_desc_mailings)
		OnCreated
	End Sub
	
	<Column(Storage:="_descid", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property descid() As Integer
		Get
			Return Me._descid
		End Get
		Set
			If ((Me._descid = value)  _
						= false) Then
				Me.OndescidChanging(value)
				Me.SendPropertyChanging
				Me._descid = value
				Me.SendPropertyChanged("descid")
				Me.OndescidChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[desc]", Storage:="_desc", DbType:="VarChar(100)")>  _
	Public Property desc() As String
		Get
			Return Me._desc
		End Get
		Set
			If (String.Equals(Me._desc, value) = false) Then
				Me.OndescChanging(value)
				Me.SendPropertyChanging
				Me._desc = value
				Me.SendPropertyChanged("desc")
				Me.OndescChanged
			End If
		End Set
	End Property
	
	<Association(Name:="mailingtype_desc_type_mailingtype_desc_mailing", Storage:="_mailingtype_desc_mailings", ThisKey:="descid", OtherKey:="descid")>  _
	Public Property mailingtype_desc_mailings() As EntitySet(Of mailingtype_desc_mailing)
		Get
			Return Me._mailingtype_desc_mailings
		End Get
		Set
			Me._mailingtype_desc_mailings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_mailingtype_desc_mailings(ByVal entity As mailingtype_desc_mailing)
		Me.SendPropertyChanging
		entity.mailingtype_desc_type = Me
	End Sub
	
	Private Sub detach_mailingtype_desc_mailings(ByVal entity As mailingtype_desc_mailing)
		Me.SendPropertyChanging
		entity.mailingtype_desc_type = Nothing
	End Sub
End Class

<Table(Name:="dbo.mailingtype_group_gran")>  _
Partial Public Class mailingtype_group_gran
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _groupid As Integer
	
	Private _granid As Integer
	
	Private _mailingtype_group_type As EntityRef(Of mailingtype_group_type)
	
	Private _mailingtype_gran As EntityRef(Of mailingtype_gran)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OngroupidChanging(value As Integer)
    End Sub
    Partial Private Sub OngroupidChanged()
    End Sub
    Partial Private Sub OngranidChanging(value As Integer)
    End Sub
    Partial Private Sub OngranidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mailingtype_group_type = CType(Nothing, EntityRef(Of mailingtype_group_type))
		Me._mailingtype_gran = CType(Nothing, EntityRef(Of mailingtype_gran))
		OnCreated
	End Sub
	
	<Column(Storage:="_groupid", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property groupid() As Integer
		Get
			Return Me._groupid
		End Get
		Set
			If ((Me._groupid = value)  _
						= false) Then
				If Me._mailingtype_group_type.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OngroupidChanging(value)
				Me.SendPropertyChanging
				Me._groupid = value
				Me.SendPropertyChanged("groupid")
				Me.OngroupidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_granid", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property granid() As Integer
		Get
			Return Me._granid
		End Get
		Set
			If ((Me._granid = value)  _
						= false) Then
				If Me._mailingtype_gran.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OngranidChanging(value)
				Me.SendPropertyChanging
				Me._granid = value
				Me.SendPropertyChanged("granid")
				Me.OngranidChanged
			End If
		End Set
	End Property
	
	<Association(Name:="mailingtype_group_type_mailingtype_group_gran", Storage:="_mailingtype_group_type", ThisKey:="groupid", OtherKey:="groupid", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property mailingtype_group_type() As mailingtype_group_type
		Get
			Return Me._mailingtype_group_type.Entity
		End Get
		Set
			Dim previousValue As mailingtype_group_type = Me._mailingtype_group_type.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._mailingtype_group_type.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._mailingtype_group_type.Entity = Nothing
					previousValue.mailingtype_group_grans.Remove(Me)
				End If
				Me._mailingtype_group_type.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.mailingtype_group_grans.Add(Me)
					Me._groupid = value.groupid
				Else
					Me._groupid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("mailingtype_group_type")
			End If
		End Set
	End Property
	
	<Association(Name:="mailingtype_gran1_mailingtype_group_gran", Storage:="_mailingtype_gran", ThisKey:="granid", OtherKey:="granid", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property mailingtype_gran() As mailingtype_gran
		Get
			Return Me._mailingtype_gran.Entity
		End Get
		Set
			Dim previousValue As mailingtype_gran = Me._mailingtype_gran.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._mailingtype_gran.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._mailingtype_gran.Entity = Nothing
					previousValue.mailingtype_group_grans.Remove(Me)
				End If
				Me._mailingtype_gran.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.mailingtype_group_grans.Add(Me)
					Me._granid = value.granid
				Else
					Me._granid = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("mailingtype_gran")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.mailingtype_group_type")>  _
Partial Public Class mailingtype_group_type
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _groupid As Integer
	
	Private _desc As String
	
	Private _color As String
	
	Private _mailingtype_group_grans As EntitySet(Of mailingtype_group_gran)
	
	Private _mailingtype_overrides As EntitySet(Of mailingtype_override)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OngroupidChanging(value As Integer)
    End Sub
    Partial Private Sub OngroupidChanged()
    End Sub
    Partial Private Sub OndescChanging(value As String)
    End Sub
    Partial Private Sub OndescChanged()
    End Sub
    Partial Private Sub OncolorChanging(value As String)
    End Sub
    Partial Private Sub OncolorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mailingtype_group_grans = New EntitySet(Of mailingtype_group_gran)(AddressOf Me.attach_mailingtype_group_grans, AddressOf Me.detach_mailingtype_group_grans)
		Me._mailingtype_overrides = New EntitySet(Of mailingtype_override)(AddressOf Me.attach_mailingtype_overrides, AddressOf Me.detach_mailingtype_overrides)
		OnCreated
	End Sub
	
	<Column(Storage:="_groupid", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property groupid() As Integer
		Get
			Return Me._groupid
		End Get
		Set
			If ((Me._groupid = value)  _
						= false) Then
				Me.OngroupidChanging(value)
				Me.SendPropertyChanging
				Me._groupid = value
				Me.SendPropertyChanged("groupid")
				Me.OngroupidChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[desc]", Storage:="_desc", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property desc() As String
		Get
			Return Me._desc
		End Get
		Set
			If (String.Equals(Me._desc, value) = false) Then
				Me.OndescChanging(value)
				Me.SendPropertyChanging
				Me._desc = value
				Me.SendPropertyChanged("desc")
				Me.OndescChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_color", DbType:="VarChar(10)")>  _
	Public Property color() As String
		Get
			Return Me._color
		End Get
		Set
			If (String.Equals(Me._color, value) = false) Then
				Me.OncolorChanging(value)
				Me.SendPropertyChanging
				Me._color = value
				Me.SendPropertyChanged("color")
				Me.OncolorChanged
			End If
		End Set
	End Property
	
	<Association(Name:="mailingtype_group_type_mailingtype_group_gran", Storage:="_mailingtype_group_grans", ThisKey:="groupid", OtherKey:="groupid")>  _
	Public Property mailingtype_group_grans() As EntitySet(Of mailingtype_group_gran)
		Get
			Return Me._mailingtype_group_grans
		End Get
		Set
			Me._mailingtype_group_grans.Assign(value)
		End Set
	End Property
	
	<Association(Name:="mailingtype_group_type_mailingtype_override", Storage:="_mailingtype_overrides", ThisKey:="groupid", OtherKey:="groupid")>  _
	Public Property mailingtype_overrides() As EntitySet(Of mailingtype_override)
		Get
			Return Me._mailingtype_overrides
		End Get
		Set
			Me._mailingtype_overrides.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_mailingtype_group_grans(ByVal entity As mailingtype_group_gran)
		Me.SendPropertyChanging
		entity.mailingtype_group_type = Me
	End Sub
	
	Private Sub detach_mailingtype_group_grans(ByVal entity As mailingtype_group_gran)
		Me.SendPropertyChanging
		entity.mailingtype_group_type = Nothing
	End Sub
	
	Private Sub attach_mailingtype_overrides(ByVal entity As mailingtype_override)
		Me.SendPropertyChanging
		entity.mailingtype_group_type = Me
	End Sub
	
	Private Sub detach_mailingtype_overrides(ByVal entity As mailingtype_override)
		Me.SendPropertyChanging
		entity.mailingtype_group_type = Nothing
	End Sub
End Class

<Table(Name:="dbo.mailingtype_override")>  _
Partial Public Class mailingtype_override
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _mailing_id As Long
	
	Private _granid As System.Nullable(Of Integer)
	
	Private _groupid As System.Nullable(Of Integer)
	
	Private _mailingtype_group_type As EntityRef(Of mailingtype_group_type)
	
	Private _mailingtype_gran As EntityRef(Of mailingtype_gran)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onmailing_idChanging(value As Long)
    End Sub
    Partial Private Sub Onmailing_idChanged()
    End Sub
    Partial Private Sub OngranidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OngranidChanged()
    End Sub
    Partial Private Sub OngroupidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OngroupidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mailingtype_group_type = CType(Nothing, EntityRef(Of mailingtype_group_type))
		Me._mailingtype_gran = CType(Nothing, EntityRef(Of mailingtype_gran))
		OnCreated
	End Sub
	
	<Column(Storage:="_mailing_id", DbType:="BigInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property mailing_id() As Long
		Get
			Return Me._mailing_id
		End Get
		Set
			If ((Me._mailing_id = value)  _
						= false) Then
				Me.Onmailing_idChanging(value)
				Me.SendPropertyChanging
				Me._mailing_id = value
				Me.SendPropertyChanged("mailing_id")
				Me.Onmailing_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_granid", DbType:="Int")>  _
	Public Property granid() As System.Nullable(Of Integer)
		Get
			Return Me._granid
		End Get
		Set
			If (Me._granid.Equals(value) = false) Then
				If Me._mailingtype_gran.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OngranidChanging(value)
				Me.SendPropertyChanging
				Me._granid = value
				Me.SendPropertyChanged("granid")
				Me.OngranidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_groupid", DbType:="Int")>  _
	Public Property groupid() As System.Nullable(Of Integer)
		Get
			Return Me._groupid
		End Get
		Set
			If (Me._groupid.Equals(value) = false) Then
				If Me._mailingtype_group_type.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OngroupidChanging(value)
				Me.SendPropertyChanging
				Me._groupid = value
				Me.SendPropertyChanged("groupid")
				Me.OngroupidChanged
			End If
		End Set
	End Property
	
	<Association(Name:="mailingtype_group_type_mailingtype_override", Storage:="_mailingtype_group_type", ThisKey:="groupid", OtherKey:="groupid", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property mailingtype_group_type() As mailingtype_group_type
		Get
			Return Me._mailingtype_group_type.Entity
		End Get
		Set
			Dim previousValue As mailingtype_group_type = Me._mailingtype_group_type.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._mailingtype_group_type.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._mailingtype_group_type.Entity = Nothing
					previousValue.mailingtype_overrides.Remove(Me)
				End If
				Me._mailingtype_group_type.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.mailingtype_overrides.Add(Me)
					Me._groupid = value.groupid
				Else
					Me._groupid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("mailingtype_group_type")
			End If
		End Set
	End Property
	
	<Association(Name:="mailingtype_gran1_mailingtype_override", Storage:="_mailingtype_gran", ThisKey:="granid", OtherKey:="granid", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property mailingtype_gran() As mailingtype_gran
		Get
			Return Me._mailingtype_gran.Entity
		End Get
		Set
			Dim previousValue As mailingtype_gran = Me._mailingtype_gran.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._mailingtype_gran.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._mailingtype_gran.Entity = Nothing
					previousValue.mailingtype_overrides.Remove(Me)
				End If
				Me._mailingtype_gran.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.mailingtype_overrides.Add(Me)
					Me._granid = value.granid
				Else
					Me._granid = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("mailingtype_gran")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.clients")>  _
Partial Public Class client
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _clientname As String
	
	Private _cid As String
	
	Private _cid_email As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnclientnameChanging(value As String)
    End Sub
    Partial Private Sub OnclientnameChanged()
    End Sub
    Partial Private Sub OncidChanging(value As String)
    End Sub
    Partial Private Sub OncidChanged()
    End Sub
    Partial Private Sub Oncid_emailChanging(value As Integer)
    End Sub
    Partial Private Sub Oncid_emailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_clientname", DbType:="VarChar(50)")>  _
	Public Property clientname() As String
		Get
			Return Me._clientname
		End Get
		Set
			If (String.Equals(Me._clientname, value) = false) Then
				Me.OnclientnameChanging(value)
				Me.SendPropertyChanging
				Me._clientname = value
				Me.SendPropertyChanged("clientname")
				Me.OnclientnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_cid", DbType:="VarChar(50)")>  _
	Public Property cid() As String
		Get
			Return Me._cid
		End Get
		Set
			If (String.Equals(Me._cid, value) = false) Then
				Me.OncidChanging(value)
				Me.SendPropertyChanging
				Me._cid = value
				Me.SendPropertyChanged("cid")
				Me.OncidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_cid_email", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property cid_email() As Integer
		Get
			Return Me._cid_email
		End Get
		Set
			If ((Me._cid_email = value)  _
						= false) Then
				Me.Oncid_emailChanging(value)
				Me.SendPropertyChanging
				Me._cid_email = value
				Me.SendPropertyChanged("cid_email")
				Me.Oncid_emailChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.clients_abbr")>  _
Partial Public Class clients_abbr
	
	Private _cid_email As Integer
	
	Private _abbr As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_cid_email", DbType:="Int NOT NULL")>  _
	Public Property cid_email() As Integer
		Get
			Return Me._cid_email
		End Get
		Set
			If ((Me._cid_email = value)  _
						= false) Then
				Me._cid_email = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_abbr", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property abbr() As String
		Get
			Return Me._abbr
		End Get
		Set
			If (String.Equals(Me._abbr, value) = false) Then
				Me._abbr = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.mailingtype_gran")>  _
Partial Public Class mailingtype_gran
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _granid As Integer
	
	Private _desc As String
	
	Private _mailingtype_parses As EntitySet(Of mailingtype_parse)
	
	Private _mailingtype_group_grans As EntitySet(Of mailingtype_group_gran)
	
	Private _mailingtype_overrides As EntitySet(Of mailingtype_override)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OngranidChanging(value As Integer)
    End Sub
    Partial Private Sub OngranidChanged()
    End Sub
    Partial Private Sub OndescChanging(value As String)
    End Sub
    Partial Private Sub OndescChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._mailingtype_parses = New EntitySet(Of mailingtype_parse)(AddressOf Me.attach_mailingtype_parses, AddressOf Me.detach_mailingtype_parses)
		Me._mailingtype_group_grans = New EntitySet(Of mailingtype_group_gran)(AddressOf Me.attach_mailingtype_group_grans, AddressOf Me.detach_mailingtype_group_grans)
		Me._mailingtype_overrides = New EntitySet(Of mailingtype_override)(AddressOf Me.attach_mailingtype_overrides, AddressOf Me.detach_mailingtype_overrides)
		OnCreated
	End Sub
	
	<Column(Storage:="_granid", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property granid() As Integer
		Get
			Return Me._granid
		End Get
		Set
			If ((Me._granid = value)  _
						= false) Then
				Me.OngranidChanging(value)
				Me.SendPropertyChanging
				Me._granid = value
				Me.SendPropertyChanged("granid")
				Me.OngranidChanged
			End If
		End Set
	End Property
	
	<Column(Name:="[desc]", Storage:="_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property desc() As String
		Get
			Return Me._desc
		End Get
		Set
			If (String.Equals(Me._desc, value) = false) Then
				Me.OndescChanging(value)
				Me.SendPropertyChanging
				Me._desc = value
				Me.SendPropertyChanged("desc")
				Me.OndescChanged
			End If
		End Set
	End Property
	
	<Association(Name:="mailingtype_gran1_mailingtype_parse", Storage:="_mailingtype_parses", ThisKey:="granid", OtherKey:="granid")>  _
	Public Property mailingtype_parses() As EntitySet(Of mailingtype_parse)
		Get
			Return Me._mailingtype_parses
		End Get
		Set
			Me._mailingtype_parses.Assign(value)
		End Set
	End Property
	
	<Association(Name:="mailingtype_gran1_mailingtype_group_gran", Storage:="_mailingtype_group_grans", ThisKey:="granid", OtherKey:="granid")>  _
	Public Property mailingtype_group_grans() As EntitySet(Of mailingtype_group_gran)
		Get
			Return Me._mailingtype_group_grans
		End Get
		Set
			Me._mailingtype_group_grans.Assign(value)
		End Set
	End Property
	
	<Association(Name:="mailingtype_gran1_mailingtype_override", Storage:="_mailingtype_overrides", ThisKey:="granid", OtherKey:="granid")>  _
	Public Property mailingtype_overrides() As EntitySet(Of mailingtype_override)
		Get
			Return Me._mailingtype_overrides
		End Get
		Set
			Me._mailingtype_overrides.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_mailingtype_parses(ByVal entity As mailingtype_parse)
		Me.SendPropertyChanging
		entity.mailingtype_gran = Me
	End Sub
	
	Private Sub detach_mailingtype_parses(ByVal entity As mailingtype_parse)
		Me.SendPropertyChanging
		entity.mailingtype_gran = Nothing
	End Sub
	
	Private Sub attach_mailingtype_group_grans(ByVal entity As mailingtype_group_gran)
		Me.SendPropertyChanging
		entity.mailingtype_gran = Me
	End Sub
	
	Private Sub detach_mailingtype_group_grans(ByVal entity As mailingtype_group_gran)
		Me.SendPropertyChanging
		entity.mailingtype_gran = Nothing
	End Sub
	
	Private Sub attach_mailingtype_overrides(ByVal entity As mailingtype_override)
		Me.SendPropertyChanging
		entity.mailingtype_gran = Me
	End Sub
	
	Private Sub detach_mailingtype_overrides(ByVal entity As mailingtype_override)
		Me.SendPropertyChanging
		entity.mailingtype_gran = Nothing
	End Sub
End Class
